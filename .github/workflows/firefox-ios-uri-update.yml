name: Update URIs and Create PR
on:
  schedule:
    - cron: '0 0 1 * *' # Runs at 00:00 on the first day of every month
  workflow_dispatch:
    inputs:
      branchName:
        description: 'Branch used as target for automation'
        required: true
        default: 'main'
jobs:
  build:
    runs-on: ubuntu-latest # using ubuntu as a lightweight environment
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.event.inputs.branchName }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas requests

    - name: Run URI update script
      run: python taskcluster/scripts/uri_update.py

    - name: Check for changes
      id: git-check
      run: |
        if git diff --quiet; then
          echo "No changes detected, skipping PR creation."
          echo "changes_detected=false" >> $GITHUB_ENV
        else
          echo "Changes detected, proceeding to create PR."
          git diff
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add firefox-ios/Shared/Extensions/URLExtensions.swift
          git commit -m "empty commit" # add empty commit so when squashed the history with show PR title
          echo "changes_detected=true" >> $GITHUB_ENV
          datetime=$(date +%Y%m%d)
          echo "date=$datetime" >> $GITHUB_ENV
        fi

    - name: Determine PR Version Number
      id: versioning
      run: |
          
          git fetch --all
          # get highest current release/v branch, strip the numbers, and increment by one to get the current
          # release version target based on that state 'main'
          # if no release branch is found, default to an empty string to avoid exiting script
          highest_version=$(git branch -r | \
            { grep 'release/v' | \
            awk -F'/' '{print $NF}' | \
            sort -Vr | \
            head -n 1 | \
            grep -o '[0-9]*' || echo ""; })

          if [[ ! -z "$highest_version" ]]; then
            next_version=$((highest_version + 1))
          else
            echo "Couldn't determine current release version. Defaulting to [vXXX]"
            next_version=XXX
          fi

          echo "Next version is v$next_version"
          echo "next_version=$next_version" >> $GITHUB_ENV

    - name: Create Pull Request
      if: env.changes_detected == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.TEST_GITHUB_ACTION_TOKEN }}
        commit-message: Automated URI update on ${{ github.event.inputs.branchName || 'main' }} ${{ env.date }}
        author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
        committer: GitHub <noreply@github.com>
        title: Refactor [v${{ env.next_version }}] Automated URI update on ${{ github.event.inputs.branchName || 'main' }} ${{ env.date }}
        branch: update-uri-schemes-${{ env.date }}
        body: This automated PR updates the URIs.
