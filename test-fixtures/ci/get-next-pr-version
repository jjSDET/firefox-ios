#!/usr/bin/env bash

# Script Description:
# This script is designed to fetch the next version number for a pull request based on the highest version
# number found in the branch names of a given Git repository. It examines branches prefixed with 'release/v',
# identifies the highest numerical version, increments it by one, and outputs the next version number for use
# in automated processes, such as GitHub Actions.
#
# Usage:
# Execute the script directly in a Bash shell. The script prints the next version number to standard output.
# Example: ./get-next-pr-version.sh
#
# Requirements:
# - Bash version 4.0 or higher due to the usage of associative arrays and other advanced features.
# - Access to Git and the repository from which to fetch version numbers.

bash --version

# Get Bash version string
bash_version="Bash Version: ${BASH_VERSION[0]}"

# Calculate the length of the version string plus padding and asterisks
len=${#bash_version}
total_length=$((len + 8)) # Adding 6 for spaces and asterisks

# Generate a line of asterisks of the required length
line=$(printf '%*s' "$total_length" | tr ' ' '*')

# Output
echo "$line"
echo "*** $bash_version ***"
echo "$line"

# Check for Bash version 4.0 or above
if [ "${BASH_VERSINFO[0]}" -lt 4 ]; then
    echo "Error: Bash version 4.0 or higher is required to run this script."
    exit 1
fi

# Run pipeline and redirect the output to a temporary file
temp_file=$(mktemp)
git ls-remote --heads origin \
  | grep 'refs/heads/release/v' \
  | awk -F'/' '{print $NF}' \
  | sort -Vr \
  | head -n 1 \
  | grep -o '[0-9]\+' \
  | head -n 1 \
  | xargs > "${temp_file}"

# Check the pipeline status
return_codes=("${PIPESTATUS[@]}")

# Read the version from the temporary file
my_version=$(<"${temp_file}")

# Cleanup
rm "${temp_file}"

commands=("git ls-remote" "grep 'refs/heads/release/v'" "awk -F'/'" "sort -Vr" "head -n 1 (first grep)" "grep -o '[0-9]\+'" "head -n 1 (second head)" "xargs")
# Check each command for failure
for i in "${!return_codes[@]}"; do
  echo "Command ${commands[$i]} exited with code ${return_codes[$i]}"
  if [ "${return_codes[$i]}" -ne 0 ]; then
    echo "Failure in pipeline at command index: $i with exit code ${return_codes[$i]}"
    # If necessary, exit or handle the error
  fi
done

# Echo the version captured
echo "Current version: ${my_version}"
next_version=$((my_version + 1))
echo "Next version from get-next-pr-version: ${next_version}"
